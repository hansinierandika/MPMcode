
//! FUNCTION: CONSTRUCTOR
//!           This function set the particle id
//!
mpm::ParticleFunction::ParticleFunction(unsigned& id, VectorDDIM& pSpacing) {
    particleId_ = id;
    particleSpacing_ = pSpacing;

    particleNodes_   = VectorNPtrNN::Zero();
    particleElement_ = NULL;

    B_.clear();
    BCentre_.clear();
    BBar_.clear();
}




//! FUNCTION: COMPUTE PARTICLE LOCAL COORDINATES
//!           Note: This function uses the algorithm in the MPM code by 
//!           Samila & Krishna
//!
void mpm::ParticleFunction::computeLocalCoordinates() {

    VectorDDIM centreCoordOfE = particleElement_ -> giveElementCentreCoord();
    VectorDDIM lengthOfE      = particleElement_ -> giveElementLength();

    for (unsigned i = 0; i < dim; i++) {
        xi_(i) = 2. * (particleCoord_(i) - centreCoordOfE(i)) / lengthOfE(i);
        if (((std::fabs(xi_(i)) > 0.999999) && (std::fabs(xi_(i)) < 1.)) || (std::fabs(xi_(i)) > 1.))
            sign(xi_(i), 1.);
        else if ((std::fabs(xi_(i)) > 0.) && (std::fabs(xi_(i)) < 0.000001))
            xi_(i) = 0.;
    }
}




//! FUNCTION: COMPUTE SHAPE FUNCTIONS AT PARTICLE LOCATION
//!           This function computes the shape functions at the 
//!           particle location
//!
void mpm::ParticleFunction::computeShapeFunctions() {

    this->computeLocalCoordinates();

    if (dim == 2) {
        shapeFun_(0) = 0.25 * fabs((1 - xi_(0)) * (1 - xi_(1)));
        shapeFun_(1) = 0.25 * fabs((1 + xi_(0)) * (1 - xi_(1)));
        shapeFun_(2) = 0.25 * fabs((1 + xi_(0)) * (1 + xi_(1)));
        shapeFun_(3) = 0.25 * fabs((1 - xi_(0)) * (1 + xi_(1)));
    } else if (dim == 3) {
        shapeFun_(0) = fabs((1 - xi_(0)) * (1 - xi_(1)) * (1 - xi_(2))) / 8.;
        shapeFun_(1) = fabs((1 + xi_(0)) * (1 - xi_(1)) * (1 - xi_(2))) / 8.;
        shapeFun_(2) = fabs((1 + xi_(0)) * (1 - xi_(1)) * (1 + xi_(2))) / 8.;
        shapeFun_(3) = fabs((1 - xi_(0)) * (1 - xi_(1)) * (1 + xi_(2))) / 8.;
        shapeFun_(4) = fabs((1 - xi_(0)) * (1 + xi_(1)) * (1 - xi_(2))) / 8.;
        shapeFun_(5) = fabs((1 + xi_(0)) * (1 + xi_(1)) * (1 - xi_(2))) / 8.;
        shapeFun_(6) = fabs((1 + xi_(0)) * (1 + xi_(1)) * (1 + xi_(2))) / 8.;
        shapeFun_(7) = fabs((1 - xi_(0)) * (1 + xi_(1)) * (1 + xi_(2))) / 8.;
    }
}




//! FUNCTION: COMPUTE GLOBAL DERIVATIVES OF SHAPE FUNCTIONS
//!           This function coputes the global derivatives of the 
//!           shape functions at the particle location
//!
void mpm::ParticleFunction::computeGlobalDerivativesOfShapeFunctions() {

    //## Algorithm using Jacobian matrix
    // MatrixDDIMNN dshapeFunc;
    // this -> computeLocalDerivatives(dshapeFunc);


    VectorDDIM L = particleElement_ -> giveElementLength();
    if (dim == 2) {
        dShapeFun_(0, 0) = -0.5 * (1 - xi_(1)) / L(0);
        dShapeFun_(0, 1) =  0.5 * (1 - xi_(1)) / L(0);
        dShapeFun_(0, 2) =  0.5 * (1 + xi_(1)) / L(0);
        dShapeFun_(0, 3) = -0.5 * (1 + xi_(1)) / L(0);

        dShapeFun_(1, 0) = -0.5 * (1 - xi_(0)) / L(1);
        dShapeFun_(1, 1) = -0.5 * (1 + xi_(0)) / L(1);
        dShapeFun_(1, 2) =  0.5 * (1 + xi_(0)) / L(1);
        dShapeFun_(1, 3) =  0.5 * (1 - xi_(0)) / L(1);
    }

}



//! FUNCTION: COMPUTE GLOBAL DERIVATIVES OF SHAPE FUNCTIONS AT CENTRE 
//!           This function coputes the global derivatives of the 
//!           shape functions at the centre of the element
//!
void mpm::ParticleFunction::computeGlobalDerivativesOfShapeFunctionsAtCentre() {

    VectorDDIM L = particleElement_ -> giveElementLength();
    if (dim == 2) {
        dShapeFunCentre_(0, 0) = -0.5 / L(0);
        dShapeFunCentre_(0, 1) =  0.5 / L(0);
        dShapeFunCentre_(0, 2) =  0.5 / L(0);
        dShapeFunCentre_(0, 3) = -0.5 / L(0);

        dShapeFunCentre_(1, 0) = -0.5 / L(1);
        dShapeFunCentre_(1, 1) = -0.5 / L(1);
        dShapeFunCentre_(1, 2) =  0.5 / L(1);
        dShapeFunCentre_(1, 3) =  0.5 / L(1);
    }

}




//! FUNCTION: COMPUTE B-MATRIX
//!           This function computes the B-Matrix at the particle
//!           B_ = [B_0, B_1, B_2, B_3]
//!           where B_i = [B_ix    0      0 ]
//!                       [ 0     B_iy    0 ]
//!                       [ 0      0    B_iz]
//!                        ------------------
//!                       [B_iy   B_ix    0 ]
//!                       [ 0     B_iz  B_iy]
//!                       [B_iz    0    B_ix]
//!            where B_ij = dN_i(x_p) / dj; j = x,y,z           
//!
void mpm::ParticleFunction::computeBMatrix() {
    B_.clear();
    MatrixDDOFDIM Bi_;
    for (unsigned i = 0; i < numNodes; i++) {
        if (dim == 2) {
            Bi_(0,0) = dShapeFun_(0,i); 
            Bi_(0,1) = 0.;
            Bi_(1,0) = 0.;              
            Bi_(1,1) = dShapeFun_(1,i);
            Bi_(2,0) = dShapeFun_(1,i); 
            Bi_(2,1) = dShapeFun_(0,i);
        }
        else if (dim == 3) {
            Bi_(0,0) = dShapeFun_(0,i); 
            Bi_(0,1) = 0.; 
            Bi_(0,2) = 0.;
            Bi_(1,0) = 0.; 
            Bi_(1,1) = dShapeFun_(1,i);
            Bi_(1,2) = 0.;
            Bi_(2,0) = 0.; 
            Bi_(2,1) = 0.;
            Bi_(2,2) = dShapeFun_(2,i);
            Bi_(3,0) = dShapeFun_(1,i); 
            Bi_(3,1) = dShapeFun_(0,i); 
            Bi_(3,2) = 0; 
            Bi_(4,0) = 0; 
            Bi_(4,1) = dShapeFun_(2,i); 
            Bi_(4,2) = dShapeFun_(1,i);
            Bi_(5,0) = dShapeFun_(2,i);
            Bi_(5,1) = 0.;
            Bi_(5,2) = dShapeFun_(0,i);
        }
        B_.push_back(Bi_);
    }
}



//! FUNCTION: COMPUTE B-MATRIX AT CENTRE OF THE ELEMENT
//!           
void mpm::ParticleFunction::computeBMatrixCentre() {
    BCentre_.clear();
    MatrixDDOFDIM BiCentre_;
    for (unsigned i = 0; i < numNodes; i++) {
        if (dim == 2) {
            BiCentre_(0,0) = dShapeFunCentre_(0,i); 
            BiCentre_(0,1) = 0.;
            BiCentre_(1,0) = 0.;              
            BiCentre_(1,1) = dShapeFunCentre_(1,i);
            BiCentre_(2,0) = dShapeFunCentre_(1,i); 
            BiCentre_(2,1) = dShapeFunCentre_(0,i);
        }
        BCentre_.push_back(BiCentre_);
    }
}



//! FUNCTION: COMPUTE BBAR-MATRIX
//!           This function computes the BBAR-Matrix at the particle
//!           B_ = [BBAR_0, BBAR_1, BBAR_2, BBAR_3]
//! BBAR_i = [(BBar_ix + 2B_ix)/3  (BBar_iy - B_iy)/3   (BBar_iz - B_iz)/3]
//!          [(BBar_ix - B_ix)/3   (BBar_iy + 2B_iy)/3  (BBar_iz + B_iz)/3]
//!          [(BBar_ix - B_ix)/3   (BBar_iy - B_iy)/3  (BBar_iz + 2B_iz)/3]
//!           -----------------------------------------------------------
//!          [         B_iy              B_ix                 0           ]
//!          [          0                B_iz                B_iy         ]
//!          [         B_iz               0                  B_ix         ]
//!
void mpm::ParticleFunction::computeBBarMatrix() {

    BBar_.clear();
    MatrixDDOFDIM BBari_;
    for (unsigned i = 0; i < numNodes; i++) {
        if (dim == 2) {
            BBari_(0,0) = (1/3.0)*(dShapeFunCentre_(0,i) + (2*dShapeFun_(0,i)));
            BBari_(0,1) = (1/3.0)*(dShapeFunCentre_(1,i) - dShapeFun_(1,i));
            BBari_(1,0) = (1/3.0)*(dShapeFunCentre_(0,i) - dShapeFun_(0,i));   
            BBari_(1,1) = (1/3.0)*(dShapeFunCentre_(1,i) + (2*dShapeFun_(1,i)));
            BBari_(2,0) = dShapeFun_(1,i); 
            BBari_(2,1) = dShapeFun_(0,i);
        }
        else if (dim == 3) {
            BBari_(0,0) = (1/3.0)*(dShapeFunCentre_(0,i) + (2*dShapeFun_(0,i)));
            BBari_(0,1) = (1/3.0)*(dShapeFunCentre_(1,i) - dShapeFun_(1,i)); 
            BBari_(0,2) = (1/3.0)*(dShapeFunCentre_(2,i) - dShapeFun_(2,i));

            BBari_(1,0) = (1/3.0)*(dShapeFunCentre_(0,i) - dShapeFun_(0,i)); 
            BBari_(1,1) = (1/3.0)*(dShapeFunCentre_(1,i) + (2*dShapeFun_(1,i)));
            BBari_(1,2) = (1/3.0)*(dShapeFunCentre_(2,i) - dShapeFun_(2,i));

            BBari_(2,0) = (1/3.0)*(dShapeFunCentre_(0,i) - dShapeFun_(0,i)); 
            BBari_(2,1) = (1/3.0)*(dShapeFunCentre_(1,i) - dShapeFun_(1,i));
            BBari_(2,2) = (1/3.0)*(dShapeFunCentre_(2,i) + (2*dShapeFun_(2,i)));

            BBari_(3,0) = dShapeFun_(1,i); 
            BBari_(3,1) = dShapeFun_(0,i); 
            BBari_(3,2) = 0; 
            BBari_(4,0) = 0; 
            BBari_(4,1) = dShapeFun_(2,i); 
            BBari_(4,2) = dShapeFun_(1,i);
            BBari_(5,0) = dShapeFun_(2,i);
            BBari_(5,1) = 0.;
            BBari_(5,2) = dShapeFun_(0,i);
        }
        BBar_.push_back(BBari_);
    }

}



//! PRIVATE FUNCTION: SIGN
//!                   This function change the value of the given variable 
//!                    without changing its (+ / -) sign
//!
void mpm::ParticleFunction::sign(double& variable, double value) {
    if (variable < 0)
        variable = -value;
    if (variable > 0)
        variable = value;
}



//! PRIVATE FUNCTION: COMPUTELOCAL DERIVATIVES OF SHAPE FUNCTIONS
//!                   This function computes the local derivatives of the 
//!                   shape functions
//!
void mpm::ParticleFunction::computeLocalDerivatives(MatrixDDIMNN& dsfunc) {

    if (dim == 2) {
        dsfunc(0, 0) = -0.25 * (1 - xi_(1));
        dsfunc(0, 1) =  0.25 * (1 - xi_(1));
        dsfunc(0, 2) =  0.25 * (1 + xi_(1));
        dsfunc(0, 3) = -0.25 * (1 + xi_(1));

        dsfunc(1, 0) = -0.25 * (1 - xi_(0));
        dsfunc(1, 1) = -0.25 * (1 + xi_(0));
        dsfunc(1, 2) =  0.25 * (1 + xi_(0));
        dsfunc(1, 3) =  0.25 * (1 - xi_(0));
    }
    else if (dim == 3) {
        dsfunc(0, 0) = -0.125 * (1 - xi_(1)) * (1 - xi_(2));
        dsfunc(0, 1) =  0.125 * (1 - xi_(1)) * (1 - xi_(2));
        dsfunc(0, 2) =  0.125 * (1 - xi_(1)) * (1 + xi_(2));
        dsfunc(0, 3) = -0.125 * (1 - xi_(1)) * (1 + xi_(2));
        dsfunc(0, 4) = -0.125 * (1 + xi_(1)) * (1 - xi_(2));
        dsfunc(0, 5) =  0.125 * (1 + xi_(1)) * (1 - xi_(2));
        dsfunc(0, 6) =  0.125 * (1 + xi_(1)) * (1 + xi_(2));
        dsfunc(0, 7) = -0.125 * (1 + xi_(1)) * (1 + xi_(2));

        dsfunc(1, 0) = -0.125 * (1 - xi_(0)) * (1 - xi_(2));
        dsfunc(1, 1) = -0.125 * (1 + xi_(0)) * (1 - xi_(2));
        dsfunc(1, 2) = -0.125 * (1 + xi_(0)) * (1 + xi_(2));
        dsfunc(1, 3) = -0.125 * (1 - xi_(0)) * (1 + xi_(2));
        dsfunc(1, 4) =  0.125 * (1 - xi_(0)) * (1 - xi_(2));
        dsfunc(1, 5) =  0.125 * (1 + xi_(0)) * (1 - xi_(2));
        dsfunc(1, 6) =  0.125 * (1 + xi_(0)) * (1 + xi_(2));
        dsfunc(1, 7) =  0.125 * (1 - xi_(0)) * (1 + xi_(2));

        dsfunc(2, 0) = -0.125 * (1 - xi_(0)) * (1 - xi_(1));
        dsfunc(2, 1) = -0.125 * (1 + xi_(0)) * (1 - xi_(1));
        dsfunc(2, 2) =  0.125 * (1 + xi_(0)) * (1 - xi_(1));
        dsfunc(2, 3) =  0.125 * (1 - xi_(0)) * (1 - xi_(1));
        dsfunc(2, 4) = -0.125 * (1 - xi_(0)) * (1 + xi_(1));
        dsfunc(2, 5) = -0.125 * (1 + xi_(0)) * (1 + xi_(1));
        dsfunc(2, 6) =  0.125 * (1 + xi_(0)) * (1 + xi_(1));
        dsfunc(2, 7) =  0.125 * (1 - xi_(0)) * (1 + xi_(1));
    }
}
