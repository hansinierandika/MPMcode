/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
F1. FUNCTION: CONSTRUCTOR
              This function set the particle id
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
mpm::ParticleFunction::ParticleFunction(unsigned& id) {
    particleId_ = id;
    particleNodes_   = VectorNPtrNN::Zero();
    particleElement_ = NULL;
}


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
F2. FUNCTION: COMPUTE PARTICLE LOCAL COORDINATES
              Note: This function uses the algorithm in the MPM code by Samila
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void mpm::ParticleFunction::computeLocalCoordinates() {

    VectorDDIM centreCoordOfE = particleElement_ -> giveElementCentreCoord();
    VectorDDIM lengthOfE      = particleElement_ -> giveElementLength();

    for (unsigned i = 0; i < dim; i++) {
        xi_(i) = 2. * (particleCoord_(i) - centreCoordOfE(i)) / lengthOfE(i);
        if (((std::fabs(xi_(i)) > 0.999999) && (std::fabs(xi_(i)) < 1.)) || (std::fabs(xi_(i)) > 1.))
            sign(xi_(i), 1.);
        else if ((std::fabs(xi_(i)) > 0.) && (std::fabs(xi_(i)) < 0.000001))
            xi_(i) = 0.;
    }
    //## PRINT TO CHECK
    // std::cout << particleId_ << "\t" << xi << "\n";
}


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
F3. FUNCTION: COMPUTE SHAPE FUNCTIONS AT PARTICLE LOCATION
              This function coputes the shape functions at the particle location
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void mpm::ParticleFunction::computeShapeFunctions() {

 if (dim == 2) {
        shapeFun_(0) = 0.25 * fabs((1 - xi_(0)) * (1 - xi_(1)));
        shapeFun_(1) = 0.25 * fabs((1 + xi_(0)) * (1 - xi_(1)));
        shapeFun_(2) = 0.25 * fabs((1 + xi_(0)) * (1 + xi_(1)));
        shapeFun_(3) = 0.25 * fabs((1 - xi_(0)) * (1 + xi_(1)));
    } else if (dim == 3) {
        shapeFun_(0) = fabs((1 - xi_(0)) * (1 - xi_(1)) * (1 - xi_(2))) / 8.;
        shapeFun_(1) = fabs((1 + xi_(0)) * (1 - xi_(1)) * (1 - xi_(2))) / 8.;
        shapeFun_(2) = fabs((1 + xi_(0)) * (1 - xi_(1)) * (1 + xi_(2))) / 8.;
        shapeFun_(3) = fabs((1 - xi_(0)) * (1 - xi_(1)) * (1 + xi_(2))) / 8.;
        shapeFun_(4) = fabs((1 - xi_(0)) * (1 + xi_(1)) * (1 - xi_(2))) / 8.;
        shapeFun_(5) = fabs((1 + xi_(0)) * (1 + xi_(1)) * (1 - xi_(2))) / 8.;
        shapeFun_(6) = fabs((1 + xi_(0)) * (1 + xi_(1)) * (1 + xi_(2))) / 8.;
        shapeFun_(7) = fabs((1 - xi_(0)) * (1 + xi_(1)) * (1 + xi_(2))) / 8.;
    }
}


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
F4. FUNCTION: COMPUTE GLOBAL DERIVATIVES OF SHAPE FUNCTIONS
              This function coputes the global derivatives of the 
              shape functions at the particle location
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void mpm::ParticleFunction::computeGlobalDerivativesOfShapeFunctions() {

    //## Algorithm using Jacobian matrix
    // MatrixDDIMNN dshapeFunc;
    // this -> computeLocalDerivatives(dshapeFunc);


    VectorDDIM L = particleElement_ -> giveElementLength();
    if (dim == 2) {
        dShapeFun_(0, 0) = -0.5 * (1 - xi_(1)) / L(0);
        dShapeFun_(0, 1) =  0.5 * (1 - xi_(1)) / L(0);
        dShapeFun_(0, 2) =  0.5 * (1 + xi_(1)) / L(0);
        dShapeFun_(0, 3) = -0.5 * (1 + xi_(1)) / L(0);

        dShapeFun_(1, 0) = -0.5 * (1 - xi_(0)) / L(1);
        dShapeFun_(1, 1) = -0.5 * (1 + xi_(0)) / L(1);
        dShapeFun_(1, 2) =  0.5 * (1 + xi_(0)) / L(1);
        dShapeFun_(1, 3) =  0.5 * (1 - xi_(0)) / L(1);
    }

}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
P1. FUNCTION: SIGN
              This function change the value of the given variable without 
              changing its (+ / -) sign
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void mpm::ParticleFunction::sign(double& variable, double value) {
    if (variable < 0)
        variable = -value;
    if (variable > 0)
        variable = value;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
P2. FUNCTION: COMPUTELOCAL DERIVATIVES OF SHAPE FUNCTIONS
              This function computes the local derivatives of the 
              shape functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void mpm::ParticleFunction::computeLocalDerivatives(MatrixDDIMNN& dsfunc) {

    if (dim == 2) {
        dsfunc(0, 0) = -0.25 * (1 - xi_(1));
        dsfunc(0, 1) =  0.25 * (1 - xi_(1));
        dsfunc(0, 2) =  0.25 * (1 + xi_(1));
        dsfunc(0, 3) = -0.25 * (1 + xi_(1));

        dsfunc(1, 0) = -0.25 * (1 - xi_(0));
        dsfunc(1, 1) = -0.25 * (1 + xi_(0));
        dsfunc(1, 2) =  0.25 * (1 + xi_(0));
        dsfunc(1, 3) =  0.25 * (1 - xi_(0));
    }
    else if (dim == 3) {
        dsfunc(0, 0) = -0.125 * (1 - xi_(1)) * (1 - xi_(2));
        dsfunc(0, 1) =  0.125 * (1 - xi_(1)) * (1 - xi_(2));
        dsfunc(0, 2) =  0.125 * (1 - xi_(1)) * (1 + xi_(2));
        dsfunc(0, 3) = -0.125 * (1 - xi_(1)) * (1 + xi_(2));
        dsfunc(0, 4) = -0.125 * (1 + xi_(1)) * (1 - xi_(2));
        dsfunc(0, 5) =  0.125 * (1 + xi_(1)) * (1 - xi_(2));
        dsfunc(0, 6) =  0.125 * (1 + xi_(1)) * (1 + xi_(2));
        dsfunc(0, 7) = -0.125 * (1 + xi_(1)) * (1 + xi_(2));

        dsfunc(1, 0) = -0.125 * (1 - xi_(0)) * (1 - xi_(2));
        dsfunc(1, 1) = -0.125 * (1 + xi_(0)) * (1 - xi_(2));
        dsfunc(1, 2) = -0.125 * (1 + xi_(0)) * (1 + xi_(2));
        dsfunc(1, 3) = -0.125 * (1 - xi_(0)) * (1 + xi_(2));
        dsfunc(1, 4) =  0.125 * (1 - xi_(0)) * (1 - xi_(2));
        dsfunc(1, 5) =  0.125 * (1 + xi_(0)) * (1 - xi_(2));
        dsfunc(1, 6) =  0.125 * (1 + xi_(0)) * (1 + xi_(2));
        dsfunc(1, 7) =  0.125 * (1 - xi_(0)) * (1 + xi_(2));

        dsfunc(2, 0) = -0.125 * (1 - xi_(0)) * (1 - xi_(1));
        dsfunc(2, 1) = -0.125 * (1 + xi_(0)) * (1 - xi_(1));
        dsfunc(2, 2) =  0.125 * (1 + xi_(0)) * (1 - xi_(1));
        dsfunc(2, 3) =  0.125 * (1 - xi_(0)) * (1 - xi_(1));
        dsfunc(2, 4) = -0.125 * (1 - xi_(0)) * (1 + xi_(1));
        dsfunc(2, 5) = -0.125 * (1 + xi_(0)) * (1 + xi_(1));
        dsfunc(2, 6) =  0.125 * (1 + xi_(0)) * (1 + xi_(1));
        dsfunc(2, 7) =  0.125 * (1 - xi_(0)) * (1 + xi_(1));
    }
}


