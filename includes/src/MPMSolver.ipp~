
//! FUNCTION: CONSTRUCTOR
//!           This function defines all the input file names and 
//!           creates input file stream (ifstream)
//!
mpm::MpmSolver::MpmSolver(path_& p) {

    // define the input files names
    std::string inputFile = p.string() + "/inputFiles/input.dat";
    std::string nodeFile  = p.string() + "/inputFiles/node.dat" ;
    std::string elemFile  = p.string() + "/inputFiles/element.dat";
    std::string meshFile  = p.string() + "/inputFiles/meshData.dat";
    std::string particleFile = p.string() + "/inputFiles/particles.dat";
    std::string materialFile = p.string() + "/inputFiles/material.dat" ;
    std::string iStressFile = p.string() + "/inputFiles/initStress.dat";
    std::string velConstraintFile = p.string() + "/inputFiles/velCon.dat";
    std::string fricConstraintFile = p.string() + "/inputFiles/fricCon.dat";

    std::string feedParticleFile = p.string() + "/inputFiles/feedParticle.dat";

    // define the input file stream for reading files
    inputStream.open(inputFile.c_str());
    nodeStream.open(nodeFile.c_str());
    elementStream.open(elemFile.c_str());
    meshDataStream.open(meshFile.c_str());
    particleStream.open(particleFile.c_str());
    materialStream.open(materialFile.c_str());
    iStressStream.open(iStressFile.c_str());
    velConstraintStream.open(velConstraintFile.c_str());
    fricConstraintStream.open(fricConstraintFile.c_str());
    feedParticleStream.open(feedParticleFile.c_str());

    // verify the file is open
    mpm::misc::VERIFY_OPEN(inputStream, inputFile);
    mpm::misc::VERIFY_OPEN(nodeStream, nodeFile);
    mpm::misc::VERIFY_OPEN(elementStream, elemFile);
    mpm::misc::VERIFY_OPEN(meshDataStream, meshFile);
    mpm::misc::VERIFY_OPEN(particleStream, particleFile);
    mpm::misc::VERIFY_OPEN(materialStream, materialFile);
    mpm::misc::VERIFY_OPEN(iStressStream, iStressFile);
    mpm::misc::VERIFY_OPEN(velConstraintStream, velConstraintFile);
    mpm::misc::VERIFY_OPEN(fricConstraintStream, fricConstraintFile);
    mpm::misc::VERIFY_OPEN(feedParticleStream, feedParticleFile);


    // create the directory for the results
    std::string directoryOfResults = p.string() + "/Results";
    boost::filesystem::remove_all(directoryOfResults);
    path_ pathResults (directoryOfResults);
    if (boost::filesystem::create_directories(pathResults)) {
        std::cout << "\tResults are in " << pathResults << "\n \n";
    }
    else {
        std::cerr << "ERROR : in creating " << pathResults << "\n \n";
        abort();
    } 
    ResultsDir = pathResults.string();

    // Reading main parameters from the input.dat file
    ReadMainParameters();
    mesh_ = new mpm::Mesh(meshDataStream);
}



//! FUNCTION: READ MPM MAIN PARAMETERS
//!           This function reads the input.dat file for main parameters
//!
void mpm::MpmSolver::ReadMainParameters() {

    std::string line;
    while (std::getline(inputStream, line))
        mpm::misc::PARSE_PROPERTIES(line);

    // gravity flag 
    gravity = mpm::misc::gravity;
    freeSurface = mpm::misc::freeSurface;
    // other parameters
    dt = mpm::misc::dt;
    numOfTotalSteps = mpm::misc::numOfTotalSteps;
    numOfSubSteps = mpm::misc::numOfSubStep;

}



//! FUNCTION: READ MESH AND PARTICLES
//!           This function reads the mesh data and particle data
//!
void mpm::MpmSolver::ReadModel() {

    // read mesh 
    mesh_->readNodesAndElements(nodeStream, elementStream);
    mesh_->readVelocityConstraints(velConstraintStream);
    mesh_->computeElementCentreCoordinates();

    // read particles
    particle_.readParticles(particleStream, iStressStream);

    // read material
    mpm::material::ReadMaterial mat(materialStream);
    materials = mat.givePtrsToMaterials();

    // assign material to particles
    particle_.assignMaterialToParticles(materials);

}



//! FUNCTION: INITIALISE ALL
//!           This function initialise the system to start the calculation
//!           at each time step
//!           This includes initialising mesh nodes, elements, particless
//!
void mpm::MpmSolver::InitialiseAll() {

    mesh_ -> initialiseMesh();
    particle_.initialiseParticles();
}




//! FUNCTION: SEARCH AND LOCATE PARTICLES
//!          This function locate the particles inside the mesh and then
//!          compute the shape functions at particle locations
//!
void mpm::MpmSolver::SearchAndLocateParticles() {

    mesh_ -> locateParticlesInMesh(particle_);
    particle_.computeShapeFunctionsAtParticles();
}



//! FUNCTION: SET PARTICLE INITIAL VELOCITY 
//!           This function set the particle initial velocity from the velocity
//!           boundary conditions applied at the nodes
//!
void mpm::MpmSolver::ApplyParticleInitialVelocity() {
    particle_.applyParticleInitialVelocityFromGrid();
}



//! FUNCTION: MAP DATA TO GRID
//!           This function map the particle mass and velocity to the grid 
//!
void mpm::MpmSolver::MapDataToGrid() {
 
    particle_.mapParticleMassToGrid();
    particle_.mapParticleBeginOfTimeStepMomentumToGrid();
    mesh_ -> computeVelocityFromMomentumAtNodesAtBeginOfTimeStep();
}



//! FUNCTON: SOLVE WEAKLY INCOMPRESSIBLE FLUID FLOW PROBLEM
//!          This function executes the solution of the flow of weakly 
//!          incompressible fluid flow
//!
void mpm::MpmSolver::SolveIncompressibleFluidUSF() {

    particle_.computeStrain();
    particle_.computeStress();

    particle_.computeExternalForce();
    particle_.computeInternalForce();

    mesh_->computeExplicitAccelerationAndVelocity(dt);
    particle_.updateParticleVelocity(dt);
    particle_.mapParticleEndOfTimeStepMomentumToGrid();
    mesh_ -> computeVelocityFromMomentumAtNodesAtEndOfTimeStep();
}



//! FUNCTON: SOLVE WEAKLY INCOMPRESSIBLE FLUID FLOW PROBLEM
//!          This function executes the solution of the flow of weakly 
//!          incompressible fluid flow
//!
void mpm::MpmSolver::SolveIncompressibleFluidUSL() {

    particle_.computeExternalForce();
    particle_.computeInternalForce();

    mesh_->computeExplicitAccelerationAndVelocity(dt);
    particle_.updateParticleVelocity(dt);
    particle_.mapParticleEndOfTimeStepMomentumToGrid();
    mesh_ -> computeVelocityFromMomentumAtNodesAtEndOfTimeStep();

    particle_.computeStrain();
    particle_.computeStress();
}


//! FUNCTION: UPDATE THE SYSTEM
//!           This function update the particle position and velocity.
//!
void mpm::MpmSolver::UpdateTheSystem() {

    particle_.updateParticlePosition(dt);
    particle_.updateParticleDensity();
}




//! WRITE FUNCTION: WRITE DATA TO FILE
//!                 This function write the particle data to .vtk file.
//!
void mpm::MpmSolver::WriteData(unsigned& step) {

    // Output file names
    std::string velocityFile = ResultsDir + "/velocity" + std::to_string(step) + ".vtk";
    std::string pressureFile = ResultsDir + "/pressure" + std::to_string(step) + ".vtk";
    std::string stressFile   = ResultsDir + "/stress" + std::to_string(step) + ".vtk";
    std::string strainFile   = ResultsDir + "/strain" + std::to_string(step) + ".vtk";

    // Output file stream 
    std::ofstream velocityOut(velocityFile.c_str()); 
    std::ofstream pressureOut(pressureFile.c_str());
    std::ofstream stressOut(stressFile.c_str());
    std::ofstream strainOut(strainFile.c_str());

    particle_.writeParticleVelocityDataToFile(velocityOut);
    particle_.writeParticlePressureDataToFile(pressureOut);
    particle_.writeParticleStressDataToFile(stressOut);
    particle_.writeParticleStrainDataToFile(strainOut);

    // Close output files 
    velocityOut.close();
    pressureOut.close();
    stressOut.close();
    strainOut.close();

}
